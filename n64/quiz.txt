-- TODO: Consider converting to While programming language and to write the
assembler
lw    $t6, 0x1d3c($a0)
li    $t7, 1
sllv  $t8, $t7, $a1
or    $t9, $t6, $t8
jr    $ra
sw    $t9, 0x1d3c($a0)
---
void f(u32 a0, u32 a1)
{
    u32 t6 = *(u32*)(a0 + 0x1d3c);
    u32 t7 = 1;
    u32 t8 = t7 << a1;
    u32 t9 = t6 | t8;
    *(u32*)(a0 + 0x1d3c) = t9;
}
===
compare_int:
beql a0, a1, compare_int_complete
add v0, r0, r0
slt v0, a1, a0  // a0 - a1 = tmp0  a0
beql v0, r0, compare_int_complete
addi v0, r0, -1
---
int compare_int(int a0, int a1)
{
    if (a0 < a1)
        return -1;
    if (a0 == a1)
        return 0;
    return 1;
}
===
gcd:
beq $a0, $a1, .L2
sgt $v0, $a1, $a0
bne $v0, $zero, .L1
subu $a1, $a1, $a0
b gcd
.L1:
subu $a0, $a0, $a1
b gcd
.L2:
move $v0, $a0
j $ra
---
int gcd(int a0, int a1)
{
    while (a0 != a1) {
        if (a0 > a1) a0 = a0 - a1;
        else a1 = a1 - a0;
    }
    return a0;
}
===
subu $s0, $s1, $s2
addu $t0, $s4, $s5
addu $t1, $s6, $s7
subu $s3, $t0, $t1
---
s0 = s1 - s2;
f = (s4 + s5) - (s6 + s7);
===
compare:
move $v0, $zero
slt $t0, $a0, $a1
beq $t0, $zero, .L1
addi $v0, $v0, 42
.L1:
sltu $t0, $a2, $a3
beq $t0, $zero, .L2
addi $v0, $v0, 99
.L2:
j $ra
---
int compare(int a0, // $a0
int a1, // $a1
unsigned a2, // $a2
unsigned a3) // $a3
{
    int v0 = 0; // $v0
    if (a0 < a1) v0 += 42;
    if (a2 < a3) v0 += 99;
    return v0;
}
===
addiu $t0, $a0, 3 # w: $a0
mul $t0, $t0, $a3 # x: $a1
addu $t0, $t0, $a2 # y: $a2
addu $t0, $t0, $a1 # z: $a3
---
(((a0 + 3) * a3) + a2) + a1
===
addu $t0, $a0, $a1 # x + y
slti $t0, $t0, 3 # (x+y)<3
beq $t0, $0, L0 # if false
addiu $a0, $a0, 5 # x += 5
b L1
# skip else
L0: # else
addiu $a1, $a1, 4 # y += 4
L1:
---
if ((a0 + a1) < 3)
    a0 = a0 + 5;
else
    a1 = a1 + 4;
===
move $a0, $0 # a = 0
move $a1, $0 # b = 0
li $t0, 10 # load constant
L1:
addu $a0, $a0, $a1 # a = a + b
addiu $a1, $a1, 1 # b = b + 1
bne $a1, $t0, L1 # b != 10?
---
a0 = 0;
a1 = 0;
do {
    a0 = a0 + a1;
    a1 = a1 + 1;
} while (a1 != 10);
===
move $a0, $0 # a = 0
move $a1, $0 # b = 0
li $t0, 10
b L3 # test first
L2:
addu $a0, $a0, $a1 # a = a + b
addiu $a1, $a1, 1 # b = b + 1
L3:
bne $a1, $t0, L2 # b != 10?
---
a0 = 0;
a1 = 0;
while (a1 != 10) {
a0 = a0 + a1;
a1 = a1 + 1;
}
===
move $a1, $0 # b = 0
move $a0, $a1 # a = b
li $t0, 10
b L3 # test first
L2:
addu $a0, $a0, $a1 # a = a + b
addiu $a1, $a1, 1 # b = b + 1
L3:
bne $a1, $t0, L2 # b != 10?
---
for (a0 = a1 = 0 ; a1 != 10 ; a1++)
    a0 += a1;
===
.comm a, 20 # Allocate 20
.text # Program next
main:
la $t0, a # Address of a
li $t1, 3
sw $t1, 0($t0) # a[0]
sw $t1, 4($t0) # a[1]
sw $t1, 8($t0) # a[2]
sw $t1, 12($t0) # a[3]
sw $t1, 16($t0) # a[4]
lw $t1, 8($t0) # a[2]
sll $t1, $t1, 2 # * 4
sw $t1, 4($t0) # a[1]
lw $t1, 16($t0) # a[4]
sll $t1, $t1, 1 # * 2
sw $t1, 12($t0) # a[3]
jr $ra
---
int t0[5];
void main() {
    t0[4] = t0[3] = t0[2] =
    t0[1] = t0[0] = 3;
    t0[1] = t0[2] * 4;
    t0[3] = t0[4] * 2;
}
===
move $a1, $0 # i = 0
move $a0, $a1 # s = 0
li $t0, 10
la $t1, a # base address of array
b L2
L1:
sll $t3, $a1, 2 # i * 4
addu $t3, $t1, $t3 # &a[i]
lw $t3, 0($t3) # fetch a[i]
addu $a0, $a0, $t3 # s += a[i]
addiu $a1, $a1, 1
L2:
sltu $t2, $a1, $t0 # i < 10?
bne $t2, $0, L1
---
int a1, a0, a[10];
for (a0 = a1 = 0 ; a1 < 10 ; a1++)
    a0 = a0 + a[a1];
===
move $a0, $0 # s = 0
la $t0, a # &a[0]
addiu $t1, $t0, 36 # i = a + 9
b L2
L1:
lw $t2, 0($t1) # *i
addu $a0, $a0, $t2 # s += *i
addiu $t1, $t1, -4 # i++
L2:
sltu $t2, $t1, $t0 # i < a
beq $t2, $0, L1
---
int a0, *t1, t0[10];
for (a0=0, t1 = t0+9 ; t1 >= t0 ; t1--)
    a0 += *t1;
===
fact:
addiu $sp, $sp, -8 # allocate 2 words on stack
sw $ra, 4($sp) # save return address
sw $a0, 0($sp) # and n
slti $t0, $a0, 1 # n < 1?
beq $t0, $0, L1
li $v0, 1 # Yes, return 1
addiu $sp, $sp, 8 # Pop 2 words from stack
jr $ra # return
L1:
addiu $a0, $a0, -1 # No: compute n-1
jal fact # recurse (result in $v0)
lw $a0, 0($sp) # Restore n and
lw $ra, 4($sp) # return address
mul $v0, $a0, $v0 # Compute n * fact(n-1)
addiu $sp, $sp, 8 # Pop 2 words from stack
jr $ra # return
---
int fact(int a0) {
    if (a0 < 1) return 1;
    else return (a0 * fact(a0 - 1));
}
===
