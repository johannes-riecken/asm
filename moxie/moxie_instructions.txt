and	Logical and. Performs a logical and operation on the contents of registers $rA and $rB and stores the result in $rA.
add	Add, long. Adds the contents of registers $rA and $rB and stores the result in $rA.
ashl	Arithmetic shift left. Performs an arithmetic shift left of $rA by $rB bits and stores the result in $rA.
ashr	Arithmetic shift right. Performs an arithmetic shift right of $rA by $rB bits and stores the result in $rA.
beq	Branch if equal. If the results of the last cmp demonstrated that $rA is equal to $rB, branch to the address computed by adding the signed 10-bit immediate value shifted to the left by 1 to the program counter. The branch is relative to the start of this instruction.
bge	Branch if greater than or equal. If the results of the last cmp demonstrated that the signed 32-bit value in $rA is greater than or equal to the signed 32-bit value in $rB, branch to the address computed by adding the signed 10-bit immediate value shifted to the left by 1 to the program counter. The branch is relative to the address of this instruction.
bgeu	Branch if greater than or equal, unsigned. If the results of the last cmp demonstrated that the unsigned 32-bit value in $rA is greater than or equal to the unsigned 32-bit value in $rB, branch to the address computed by adding the signed 10-bit immediate value shifted to the left by 1 bit to the program counter. The branch is relative to the address of this instruction.
bgt	Branch if greater than. If the results of the last cmp demonstrated that the signed 32-bit value in $rA is greater than the signed 32-bit value in $rB, branch to the address computed by adding the signed 10-bit immediate value shifted to the left by 1 bit to the program counter. The branch is relative to the address of this instruction.
bgtu	Branch if greater than, unsigned. If the results of the last cmp demonstrated that the unsigned 32-bit value in $rA is greater than the unsigned 32-bit value in $rB, branch to the address computed by the adding the signed 10-bit immediate value shifted to the left by 1 bit to the program counter. The branch is relative to the address of this instruction.
ble	Branch if less than or equal. If the results of the last cmp demonstrated that the signed 32-bit value in $rA is less than or equal to the signed 32-bit value in $rB, branch to the address computed by adding the signed 10-bit immediate value shifted to the left by 1 bit to the program counter. The branch is relative to the address of this instruction.
bleu	Branch if less than or equal, unsigned. If the results of the last cmp demonstrated that the unsigned 32-bit value in $rA is less than or equal to the unsigned 32-bit value in $rB, branch to the address computed by adding the signed 10-bit immediate value to the program counter. The branch is relative to the address of this instruction.
blt	Branch if less than. If the results of the last cmp demonstrated that the signed 32-bit value in $rA is less than the signed 32-bit value in $rB, branch to the address computed by adding the signed 10-bit immediate value shifted to the left by 1 bit to the program counter. The branch is relative to the address of this instruction.
bltu	Branch if less than, unsigned. If the results of the last cmp demonstrated that the unsigned 32-bit value in $rA is less than the unsigned 32-bit value in $rB, branch to the address computed by adding the signed 10-bit immediate value shifted to the left by 1 bit to the program counter. The branch is relative to the address of this instruction.
bne	Branch if not equal. If the results of the last cmp demonstrated that $rA is not equal to $rB, branch to the address computed by adding the signed 10-bit immediate value shifted to the left by 1 bit to the program counter. The branch is relative to the address of this instruction.
brk	Break. The software breakpoint instruction.
cmp	Compare. Compares the contents of $rA to $rB and store the results in the processor's internal condition code register. This is the only instruction that updates the internal condition code register used by the branch instructions.
dec	Decrement. Decrement register $rA by the 8-bit value encoded in the 16-bit opcode.
div	Divide, long. Divides the signed contents of registers $rA and $rB and stores the result in $rA. Two special cases are handled here: division by zero asserts an Divide by Zero [[Exceptions|Exception]], and INT_MIN divided by -1 results in INT_MIN.
gsr	Get special register. Move the contents of the special register S into $rA.
inc	Increment. Increment register $rA by the 8-bit value encoded in the 16-bit opcode.
jmp	Jump. Jumps to the 32-bit address stored in $rA. This is not a subroutine call, and therefore the stack is not updated.
jmpa	Jump to address. Jumps to the 32-bit address following the 16-bit opcode. This is not a subroutine call, and therefore the stack is not updated.
jsr	Jump to subroutine. Jumps to a subroutine at the address stored in $rA.
jsra	Jump to subroutine at absolute address. Jumps to a subroutine identified by the 32-bit address following the 16-bit opcode.
ld.b	Load byte. Loads the 8-bit contents stored at the address pointed to by $rB into $rA. The loaded value is zero-extended to 32-bits.
ld.l	Load long. Loads the 32-bit contents stored at the address pointed to by $rB into $rA.
ld.s	Load short. Loads the 16-bit contents stored at the address pointed to by $rB into $rA. The loaded value is zero-extended to 32-bits.
lda.b	Load absolute, byte. Loads the 8-bit value pointed at by the 32-bit address following the 16-bit opcode into register $rA. The loaded value is zero-extended to 32-bits.
lda.l	Load absolute, long. Loads the 32-bit value pointed at by the 32-bit address following the 16-bit opcode into register $rA.
lda.s	Load absolute, short. Loads the 16-bit value pointed at by the 32-bit address following the 16-bit opcode into register $rA. The loaded value is zero-extended to 32-bits.
ldi.l	Load immediate, long. Loads the 32-bit immediate following the 16-bit opcode into register %rA.
ldi.b	Load immediate, byte. Loads the 32-bit immediate following the 16-bit opcode into register %rA. This is a poor encoding, as the 32-bit value really only contains 8-bits of interest.
ldi.s	Load immediate, short. Loads the 32-bit immediate following the 16-bit opcode into register %rA. This is a poor encoding, as the 32-bit value really only contains 16-bits of interest.
ldo.b	Load offset, byte. Loads into $rA the 8-bit value from memory pointed at by the address produced by adding the 16-bit value following the 16-bit opcode to $rB. The loaded value is zero-extended to 32-bits.
ldo.l	Load offset, long. Loads into $rA the 32-bit value from memory pointed at by the address produced by adding the 16-bit value following the 16-bit opcode to $rB.
ldo.s	Load offset, short. Loads into $rA the 16-bit value from memory pointed at by the address produced by adding the 16-bit value following the 16-bit opcode to $rB. The loaded value is zero-extended to 32-bits.
lshr	Logical shift right. Performs a logical shift right of register $rA by $rB bits and stores the result in $rA.
mod	Modulus, long. Compute the modulus of the signed contents of registers $rA and $rB and stores the result in $rA.
mov	Move register to register. Move the contents of $rB into $rA.
mul	Multiply. Multiplies the contents of registers $rA and $rB and stores the lower 32-bits of a 64-bit result in $rA.
mul.x	Signed multiply, upper word. Multiplies the contents of registers $rA and $rB and stores the upper 32-bits of a 64-bit result in $rA.
neg	Negative. Changes the sign of $rB and stores the result in $rA.
nop	Do nothing.
not	Logical not. Performs a logical not operation on the contents of register $rB and stores the result in register $rA.
or	Logical or. Performs a logical or operation on the contents of registers $rA and $rB and stores the result in $rA.
pop	Pop the 32-bit contents of the top of the stack pointed to by $rA into $rB and update the stack pointer in $rA. Stacks grown down.
push	Push the contents of $rB onto a stack pointed to by $rA and update the stack pointer in $rA. Stacks grown down.
ret	Return from subroutine.
sex.b	Sign-extend byte. Sign-extend the lower 8-bits of $rB into a $rA as a 32-bit value.
sex.s	Sign-extend short. Sign-extend the lower 16-bits of $rB into a $rA as a 32-bit value.
ssr	Set special register. Move the contents of $rA into special register S.
st.b	Store byte. Stores the 8-bit contents of $rB into memory at the address pointed to by $rA.
st.l	Store long. Stores the 32-bit contents of $rB into memory at the address pointed to by $rA.
st.s	Store short. Stores the 16-bit contents of $rB into memory at the address pointed to by $rA.
sta.b	Store absolute, byte. Stores the lower 8-bit contents of $rA into memory at the 32-bit address following the 16-bit opcode.
sta.l	Store absolute, long. Stores the full 32-bit contents of $rA into memory at the 32-bit address following the 16-bit opcode.
sta.s	Store absolute, short. Stores the lower 16-bit contents of $rA into memory at the 32-bit address following the 16-bit opcode.
sto.b	Store offset, byte. Stores the 8-bit contents of $rB into memory at the address produced by adding the 16-bit value following the 16-bit opcode to $rA.
sto.l	Store offset, long. Stores the 32-bit contents of $rB into memory at the address produced by adding the 16-bit value following the 16-bit opcode to $rA.
sto.s	Store offset, short. Stores the 16-bit contents of $rB into memory at the address produced by adding the 16-bit value following the 16-bit opcode to $rA.
sub	Subtract, long. Subtracts the contents of registers $rA and $rB and stores the result in $rA.
swi	Software interrupt. Trigger a software interrupt, where the interrupt type is encoded in the 32-bits following the 16-bit opcode.
udiv	Divide unsigned, long. Divides the unsigned contents of registers $rA and $rB and stores the result in $rA.
umod	Modulus unsigned, long. Compute the modulus of the unsigned contents of registers $rA and $rB and stores the result in $rA.
umul.x	Unsigned multiply, upper word. Multiplies the contents of registers $rA and $rB and stores the upper 32-bits of an unsigned 64-bit result in $rA.
xor	Logical exclusive or. Performs a logical exclusive or operation on the contents of registers $rA and $rB and stores the result in $rA.
zex.b	Zero-extend byte. Zero-extend the lower 8-bits of $rB into a $rA as a 32-bit value.
zex.s	Zero-extend short. Zero-extend the lower 16-bits of $rB into a $rA as a 32-bit value.
