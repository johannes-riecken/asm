ret	is used to return control flow (and optionally a value) from a function back to the caller.
br	is used to cause control flow to transfer to a different basic block in the current function. There are two forms of this instruction, corresponding to a conditional branch and an unconditional branch.
switch	is used to transfer control flow to one of several different places. It is a generalization of the ‘br’ instruction, allowing a branch to occur to one of many possible destinations.
indirectbr	implements an indirect branch to a label within the current function, whose address is specified by “address”. Address must be derived from a blockaddress constant.
invoke	causes control to transfer to a specified function, with the possibility of control flow transfer to either the ‘normal’ label or the ‘exception’ label. If the callee function returns with the “ret” instruction, control flow will return to the “normal” label. If the callee (or any indirect callees) returns via the “resume” instruction or other exception handling mechanism, control is interrupted and continued at the dynamically nearest “exception” label.
resume	is a terminator instruction that has no successors.
catchswitch	is used by LLVM’s exception handling system to describe the set of possible catch handlers that may be executed by the EH personality routine.
catchret	is a terminator instruction that has a single successor.
cleanupret	is a terminator instruction that has an optional successor.
unreachable	has no defined semantics. This instruction is used to inform the optimizer that a particular portion of the code is not reachable. This can be used to indicate that the code after a no-return function cannot be reached, and other facts.
add	returns the sum of its two operands.
fadd	returns the sum of its two operands.
sub	returns the difference of its two operands.
fsub	returns the difference of its two operands.
mul	returns the product of its two operands.
fmul	returns the product of its two operands.
udiv	returns the quotient of its two operands.
sdiv	returns the quotient of its two operands.
fdiv	returns the quotient of its two operands.
urem	returns the remainder from the unsigned division of its two arguments.
srem	returns the remainder from the signed division of its two operands. This instruction can also take vector versions of the values in which case the elements must be integers.
frem	returns the remainder from the division of its two operands.
shl	returns the first operand shifted to the left a specified number of bits.
lshr	(logical shift right) returns the first operand shifted to the right a specified number of bits with zero fill.
ashr	(arithmetic shift right) returns the first operand shifted to the right a specified number of bits with sign extension.
and	returns the bitwise logical and of its two operands.
or	returns the bitwise logical inclusive or of its two operands.
xor	returns the bitwise logical exclusive or of its two operands. The xor is used to implement the “one’s complement” operation, which is the “~” operator in C.
extractelement	extracts a single scalar element from a vector at a specified index.
insertelement	inserts a scalar element into a vector at a specified index.
shufflevector	constructs a permutation of elements from two input vectors, returning a vector with the same element type as the input and length that is the same as the shuffle mask.
extractvalue	extracts the value of a member field from an aggregate value.
insertvalue	inserts a value into a member field in an aggregate value.
alloca	allocates memory on the stack frame of the currently executing function, to be automatically released when this function returns to its caller. The object is always allocated in the address space for allocas indicated in the datalayout.
load	is used to read from memory.
store	is used to write to memory.
fence	is used to introduce happens-before edges between operations.
cmpxchg	is used to atomically modify memory. It loads a value in memory and compares it to a given value. If they are equal, it tries to store a new value into the memory.
atomicrmw	is used to atomically modify memory.
getelementptr	is used to get the address of a subelement of an aggregate data structure. It performs address calculation only and does not access memory. The instruction can also be used to calculate a vector of such addresses.
trunc	truncates its operand to the type ty2.
zext	zero extends its operand to type ty2.
sext	sign extends value to the type ty2.
fptrunc	truncates value to type ty2.
fpext	extends a floating-point value to a larger floating-point value.
fptoui	converts a floating-point value to its unsigned integer equivalent of type ty2.
fptosi	converts floating-point value to type ty2.
uitofp	regards value as an unsigned integer and converts that value to the ty2 type.
sitofp	regards value as a signed integer and converts that value to the ty2 type.
ptrtoint	converts the pointer or a vector of pointers value to the integer (or vector of integers) type ty2.
inttoptr	converts an integer value to a pointer type, ty2.
bitcast	converts value to type ty2 without changing any bits.
addrspacecast	converts ptrval from pty in address space n to type pty2 in address space m.
icmp	returns a boolean value or a vector of boolean values based on comparison of its two integer, integer vector, pointer, or pointer vector operands.
fcmp	returns a boolean value or vector of boolean values based on comparison of its operands.
phi	is used to implement the φ node in the SSA graph representing the function.
select	is used to choose one value based on a condition, without IR-level branching.
call	represents a simple function call.
va_arg	is used to access arguments passed through the “variable argument” area of a function call. It is used to implement the va_arg macro in C.
landingpad	is used by LLVM’s exception handling system to specify that a basic block is a landing pad — one where the exception lands, and corresponds to the code found in the catch portion of a try/catch sequence. It defines values supplied by the personality function upon re-entry to the function. The resultval has the type resultty.
catchpad	is used by LLVM’s exception handling system to specify that a basic block begins a catch handler — one where a personality routine attempts to transfer control to catch an exception.
cleanuppad	is used by LLVM’s exception handling system to specify that a basic block is a cleanup block — one where a personality routine attempts to transfer control to run cleanup actions. The args correspond to whatever additional information the personality function requires to execute the cleanup. The resultval has the type token and is used to match the cleanuppad to corresponding cleanuprets. The parent argument is the token of the funclet that contains the cleanuppad instruction. If the cleanuppad is not inside a funclet, this operand may be the token none.
